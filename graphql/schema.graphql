schema {
  query: Query
  mutation: Mutation
}

# Interface

interface BasicPerson {
  id: ID!
  name: String!
  surname: String!
  birthdate: String!
  email: String
  createdAt: String!
}

# Types

type Symptoms {
  tosse: Int
  chiado: Int
  fluxoAr: Int
  asthmaAttack: Int
  createdAt: String
}

type Child implements BasicPerson {
  id: ID!
  name: String!
  surname: String!
  email: String
  birthdate: String!
  createdAt: String!
  parentId: ID
  weight: Float
  height: Float
  symptoms: [Symptoms]
}

type Parent implements BasicPerson {
  id: ID!
  name: String!
  surname: String!
  email: String
  birthdate: String!
  createdAt: String!
  childsId: [String]
}
type Doctor implements BasicPerson {
  id: ID!
  name: String!
  surname: String!
  email: String
  birthdate: String!
  createdAt: String!
  childsId: [String]
}

# Inputs

input ChildInput {
  name: String
  surname: String!
  parentId: ID!
  weight: Float
  height: Float
  birthdate: String!
}

input ParentInput {
  name: String!
  surname: String!
  email: String!
  birthdate: String!
}

input DoctorInput {
  name: String!
  surname: String!
  email: String!
  birthdate: String!
}

# Query

type Query {
  getParent(id: String!): Parent
  getChild(id: String!): Child
  getDoctor(id: String!): Doctor
}

# Mutation

type Mutation {
  createParent(input: ParentInput): Parent
  createChild(input: ChildInput): Child
  createDoctor(input: DoctorInput): Doctor
}
